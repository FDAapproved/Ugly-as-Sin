class UaS_Bootstrap : EventHandler {
	transient cvar deathfade;

	override void WorldTick() {
		for (int i = 0; i < MAXPLAYERS; i++) {
			if (!playeringame[i]) { continue; }
			if (UaS_HungerEnabled) { Hunger_Bootstrap(i); }
			if (UaS_JammingEnabled) { Jamming_Bootstrap(i); }
			if (UaS_AdvancedAIEnabled && UaS_AI_Stealth) { Stealth_PlayerBootstrap(i); }
			Looting_Bootstrap(i);
			Medical_Bootstrap(i);
			Hunger_Bootstrap(i);
			if(players[i].health > 0) { Deathfade_Bootstrap(i, false); }
		}
	}

	override void PlayerEntered(PlayerEvent e) {
		if (!e.IsReturn) AimSway_Bootstrap(e.PlayerNumber);
	}

	override void PlayerDied(PlayerEvent e) {
		if (!deathfade) { deathfade = CVar.GetCVar("UaS_DeathFade", players[e.PlayerNumber]); }
		if (deathfade.GetBool() == false) { return; }
		Deathfade_Bootstrap(e.PlayerNumber, true);
	}
}

extend class UaS_BootStrap {
	void Hunger_Bootstrap(int pnum) {
		PlayerInfo p = players[pnum];
		if (!p.mo) { return; }
		if (!p.mo.countinv("UaS_HungerTracker")) {
			p.mo.giveinventory("UaS_HungerTracker", 1);
			if(UaS_Debug & Hunger) { console.printf("Hunger: Player "..pnum.." given tracker."); }
		}
	}

	void Looting_Bootstrap(int pnum) {
		PlayerInfo p = players[pnum];
		if (!p.mo) { return; }
		if (!p.mo.countinv("UaS_Looting_Handler")) {
			p.mo.giveinventory("UaS_Looting_Handler", 1);
			if(UaS_Debug & Looting) { console.printf("Looting: Player "..pnum.." given tracker."); }
		}
	}

	void Medical_Bootstrap(int pnum) {
		PlayerInfo p = players[pnum];
		if (!p.mo) { return; }
		if (!p.mo.countinv("UaS_2F_Handler")) {
			p.mo.giveinventory("UaS_2F_Handler", 1);
		}
		if (!p.mo.countinv("UaS_WoundStabilization")) {
			p.mo.giveinventory("UaS_WoundStabilization", 1);
		}
		if (!p.mo.countinv("UaS_WoundHandler")) {
			p.mo.giveinventory("UaS_WoundHandler", 1);
		}
	}

	void AimSway_Bootstrap(int pnum) {
		UaS_Aim_Thinker aimthinker = new("UaS_Aim_Thinker");
		aimthinker.plr = HDPlayerPawn(players[pnum].mo);
		if(!aimthinker.plr) {
			console.printf("new aimthinker failed for "..pnum) ;
			aimthinker.destroy();
			return;
		}

		// these could be cvar-influenced?
		aimthinker.zoomdefault = 1.0;
		aimthinker.zoomtarget = 0.75;
		aimthinker.zoomcurrent = 1.0;
		aimthinker.zoomdelay = 35;
		aimthinker.zoomspring = 0.1;
	}

	void Stealth_PlayerBootstrap(int pnum) {
		PlayerInfo p = players[pnum];
		if (!p.mo) { return; }
		if (!p.mo.countinv("UaS_StealthHandler")) {
			p.mo.Giveinventory("UaS_StealthHandler", 1);
		}
	}

	void Deathfade_Bootstrap(int pnum, bool activate) {
		Shader.SetEnabled(players[pnum].mo.player, "deathfade", activate);
		if (!activate) { return; }
		UaS_DeathFader df = new("UaS_DeathFader");
		df.plr = HDPlayerPawn(players[pnum].mo);
		df.counttoblack = (11 - min(abs(players[pnum].mo.health),10)) * 35;
		if(!df.plr) {
			console.printf("new deathfader failed for "..pnum) ;
			df.destroy();
			return;
		}
	}

	void Jamming_Bootstrap(int pnum) {
		PlayerInfo p = players[pnum];
		if (!p.mo) { return; }
		if (!p.mo.countinv("UaS_WeaponJammer")) {
			p.mo.Giveinventory("UaS_WeaponJammer", 1);
		}
	}
}
