extend class UaS_AI_Handler {
	UaS_LaserLightModule llm;
	int	recheck;
	bool flashing;
	int flashrate;

	void Flashlight() {
		if (owner.isFrozen() || level.isFrozen()) { return; }
		// Only do light for human-type classes and robots
		bool BotClass = (
			owner is "HERPBot" ||
			owner is "DERPBot"
		);
		bool HumanClass = (
			owner is "ZombieStormtrooper" ||
			owner is "HideousShotgunGuy" ||
			owner is "VulcanetteGuy" ||
			owner is "HDMarine"
		);
		if (!BotClass && !HumanClass) { return; }

		if (!owner.FindInventory("UaS_LaserLightModule")) {
			owner.giveinventory("UaS_LaserLightModule", 1);
			llm = UaS_LaserLightModule(owner.FindInventory("UaS_LaserLightModule"));
			llm.ModeSwitch(random[aillm](0,2));
		}

		if (!UaS_AI_Flashlights) { llm.activated = false; return; }

		if (HumanClass && recheck <= 0) {
			llm.offset = 8;
			// sample light from ahead of monster
			FLineTraceData lookSpot;
			owner.LineTrace(owner.angle, 256, owner.pitch, TRF_THRUACTORS, owner.height * 0.75, data: lookSpot);
			int lightlevel = int(lookSpot.HitSector.LightLevel + owner.cursector.lightlevel) / 2;

			// More likely to activate in darker areas
			if (random[aillm](0,192) > lightlevel) { llm.activated = true; }
			else { llm.activated = false; }

			// misc other adjustments
			flashrate = random[aillm](2, 4);
			recheck = max(random[aillm](35, 175), lightlevel); // recheck more often in darker areas
			if (random[aillm](0,1) > 0.75) { llm.ModeSwitch(random[aillm](0,2)); }
			if (random[aillm](0,128) > lightlevel) { llm.ModeSwitch(randompick[aillm](0,2)); }
		}

		if (owner is "HERPBot") {
			llm.mode = 1;
			llm.activated = true;
			llm.offset = 8;
		}

		if (owner is "DERPBot") {
			llm.mode = 0;
			llm.activated = true;
			llm.offset = 2;
		}

		// Some bools
		bool isowneraiming = (
			owner.frame ==  4 || owner.frame ==  5 ||
			owner.frame == 23 || owner.frame == 24
		);
		flashing = (
			owner.target &&
			isowneraiming &&
			(llm.mode == 0 || llm.mode == 2)
		);

		if (flashing && level.maptime & flashrate) { llm.ToggleSwitch(); }

		// Handle random light movement
		if ((level.maptime % 10 == 0) && !BotClass) {
			if (owner.target && !(owner.target is "UaS_LastKnownMarker")) {
				llm.angleoffset = frandom[ai](-35, 35);
				llm.pitchoffset = frandom[ai](-25, 25);
				//if (!isowneraiming) { llm.pitchoffset += 10; }
			}
			else if (random[ai](0, 1) == 0) {
				llm.angleoffset = frandom[ai](-20, 20);
				llm.pitchoffset = frandom[ai](-10, 10);
				//if (!isowneraiming) { llm.pitchoffset += 20; }
			}
		}
		if (isowneraiming && flashing) {
			llm.angleoffset = 0;
			llm.pitchoffset = 0;
		}

		recheck--;
	}
}
