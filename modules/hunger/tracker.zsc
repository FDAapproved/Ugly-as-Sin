class UaS_HungerTracker : Inventory {
	int energy;
	int hydro;
	int mouthtime;
	int mouth_calories;
	int mouth_fluid;
	int pending_calories;
	int pending_fluid;
	bool drinking;

	default {
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNTOSSABLE;
		-INVENTORY.INVBAR;
	}

	override void DoEffect() {
		if (owner.health <= 0) { return; }
		Consume();
		ProcessEnergy();
	}

	void ProcessEnergy() {
		HDPlayerPawn o = HDPlayerPawn(owner);
		if (!o) { return; }
		string debugmsg = "Fatigue %i, energy %i < %i, hydro %i < %i";
		if (o.beatcount > 0) { return; }

		if (!UaS_HungerEnabled) { return; }

		// base drain, disabled via cvar
		if (UaS_HungerMetabolism && o.beatcounter % 35 == 0) {
			energy = max(energy - 1, 0);
			hydro = max(hydro - 1, 0);
			debugmsg.appendformat(" \cdbase\c- ");
		}

		// Drain from jogging
		if (o.runwalksprint >= 0 && o.beatcounter % 5 == 0) {
			energy = max(energy - 1, 0);
			hydro = max(hydro - 1, 0);
			debugmsg.appendformat(" \ciexertion\c- ");
		}

		// drain from fatigue
		if (o.fatigue > 0) {
			// fatigue recovery and additional drain
			if (hydro > 0 && o.beatcounter % 4 == 0) {
				o.fatigue = max(o.fatigue - 1, 0);
				hydro = max(hydro - 1, 0);
				debugmsg.appendformat(" \cafatigue\c- ");
			}
			else if (energy > 0 && o.beatcounter % 6 == 0) {
				o.fatigue = max(o.fatigue - 1, 0);
				energy = max(energy - 1, 0);
				debugmsg.appendformat(" \cafatigue\c- ");
			}
		}

		// Process consumed food into energy
		if (pending_calories > 0 && o.beatcounter % 2 == 0) { energy++; pending_calories--; }
		if (pending_fluid > 0 && o.beatcounter % 2 == 0) { hydro++; pending_fluid--; }

		if(UaS_Debug & Hunger && o.beatcounter % 35 == 0) { o.A_Log(string.format(debugmsg, o.fatigue, energy, pending_calories, hydro, pending_fluid), true); }
	}

	void Consume() {
		if (mouthclear()) { return; }
		if (level.maptime % howfull() == 0) {
			string snd = "";
			if (!drinking) { snd="UaS/Chew"; }
			else if (random[uas_hunger](false, true)) { snd = "UaS/Sip"; }
			owner.A_StartSound(snd,
				CHAN_BODY, CHANF_OVERLAP,
				frandom[uas_hunger](0.6, 0.8), ATTN_STATIC,
				frandom[uas_hunger](0.9, 1.1));
			mouthtime--;
		}
		if (mouthclear()) {
			owner.A_StartSound("UaS/Swallow", CHAN_VOICE, volume: 0.5);
			if (UaS_HungerEnabled) { // Don't actually add calories if disabled
				pending_calories += mouth_calories;
				pending_fluid += mouth_fluid;
			}
			mouth_calories = 0;
			mouth_fluid = 0;
			drinking = false;
			if(UaS_Debug & Hunger) { owner.A_Log("fullness delay "..howfull()); }
			return;
		}
	}

	void EatOrDrink(int addcalories = 0, int addfluid = 0, int addtime = 5) {
		mouth_calories += addcalories;
		mouth_fluid += addfluid;
		mouthtime = addtime;
	}

	bool mouthclear() {
		return (mouthtime <= 0);
	}

	int howfull() {
		int r = (pending_calories + pending_fluid) / 40;
		return clamp(r, 12, 30);
	}
}
