extend class UaS_Spawner {
	void LLMSpawns(WorldEvent e) {
		if(level.maptime > 1) { return; }
		if(!e.Thing) { return; }
		if(e.Thing is "Inventory" && Inventory(e.Thing).Owner) { return; }

		bool spawnable = (
			e.thing.GetClassName() == "PortableLiteAmp" ||
			e.Thing.GetClassName() == "HDAmBox" ||
			e.Thing.GetClassName() == "HDBackpack");

		if(spawnable) {
			UaS.SpawnStuff('UaS_LaserLightModule', randompick[llm](0, 1), e.Thing.pos);
		}
	}
}


class UaS_LaserLightModule : HDPickup {
	int mode;
	bool activated;
	UaS_LLM_Emitter emitter;
	vector3 oldsc;
	double offset;
	double angleoffset,pitchoffset;
	color LaserColor;
	double LaserAlpha;
	transient cvar beams;

	default {
		radius 3;
		height 3;
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "Picked up a combo laser/light module.";
		Inventory.Icon "UGSIe0";
		HDPickup.Bulk 5;
		HDPickup.refid UAS_HDLD_LASERLIGHT;
		tag "Light/Laser module";
		scale 0.5;
	}

	states {
		spawn:
			UGSI E -1;
			stop;
	}

	void ToggleSwitch() {
		owner.A_StartSound("UaS/llm/toggle",
			CHAN_AUTO,
			CHANF_OVERLAP,
			volume: frandom[llm](0.8,1.0),
			attenuation: ATTN_STATIC,
			pitch: frandom[llm](0.9, 1.1));
		activated = !activated;
	}
	void ModeSwitch(int direct = -1) {
		owner.A_StartSound("UaS/llm/toggle",
			CHAN_AUTO,
			CHANF_OVERLAP,
			volume: frandom[llm](0.5,0.7),
			attenuation: ATTN_STATIC,
			pitch: frandom[llm](0.7, 0.8));
		if (direct >= 0) { mode = direct; }
		else { mode = (mode + 1) % 3; }
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		offset = 12;
	}

	override bool Use(bool pickup) {
		if (owner.player.cmd.buttons & BT_USE) {
			ModeSwitch();
			return false;
		}
		ToggleSwitch();
		return false;
	}

	override void DoEffect() {
		if (!emitter) { emitter = UaS_LLM_Emitter(actor.spawn("UaS_LLM_Emitter", owner.pos, false)); }
		UpdateEmitter();
		if(activated && owner.health > 0) {
			switch (mode) {
				case 0: //Flashlight
					Light(true);
					Laser(false);
					break;
				case 1: //Laser
					Light(false);
					Laser(true);
					break;
				case 2: //Both
					Light(true);
					Laser(true);
					break;
			}
		}
		else {
			Light(false);
			Laser(false);
		}
		super.doEffect();
	}

	void UpdateEmitter() {
		vector3 newpos;
		double newangle, newpitch;
		if (owner is "HDPlayerPawn") {
			HDPlayerPawn p = HDPlayerPawn(owner);
			actor sc = p.scopecamera;
			if (!p || !sc) { return; }
			newpos = owner.vec3Angle(
				offset * cos(-sc.pitch) + 4 * sin(-sc.pitch),
				sc.angle,
				offset * sin(-sc.pitch) + ((owner.player.viewz - owner.pos.z) - 4));
			newpos.z = min(
				newpos.z,
				owner.pos.z + HDWeapon(HDPlayerPawn(owner).player.readyweapon).GetShootOffset(owner));
			newangle = sc.angle;
			newpitch = sc.pitch;
		}
		else {
			newpos = owner.vec3Angle(
				offset * cos(-owner.pitch),
				owner.angle,
				offset * sin(-owner.pitch) + (owner.height * 0.7));
			newangle = emitter.angle + (0.15 * deltaangle(emitter.angle, owner.angle + angleoffset));
			newpitch = emitter.pitch + (0.15 * deltaangle(emitter.pitch, owner.pitch + pitchoffset));
		}
		emitter.setOrigin(newpos, true);
		emitter.A_SetAngle(newangle, true);
		emitter.A_SetPitch(newpitch, true);
		emitter.vel = owner.vel;
		emitter.source = self;
	}

	void Light(bool on) {
		if (!on) { emitter.Deactivate(self); return; }
		emitter.Activate(self); // turn on dynlight

		// Draw flashlight particle beam
		if (!beams) { beams = CVar.GetCVar("UaS_FlashlightParticles", players[consoleplayer]); }
		if (beams.GetBool() == false) { return; }
		FLineTraceData flTrace;
		emitter.LineTrace(emitter.angle, 64, emitter.pitch, TRF_THRUACTORS, data: flTrace);
		int start = 1; //particle beam starts at emitter
		if(owner.CheckLocalView()) { start = 12; } // unless local player
		if(owner is "DERPBot") { start = 4; } // Reduce beams on DERPs
		for (double d = start; d < flTrace.distance; d = d + (d / 2)) {
			emitter.A_SpawnParticle("White", SPF_FULLBRIGHT|SPF_RELANG,
				1, (sin(20) * d * 8), 0,
				cos(emitter.pitch) * cos(emitter.angle) * (d),
				cos(emitter.pitch) * sin(emitter.angle) * (d),
				sin(-emitter.pitch) * (d),
				owner.vel.x, owner.vel.y, owner.vel.z,
				0, 0, 0,
				(0.75) / (d ** 1.1), 0, 0);
		}
	}

	void Laser(bool on) {
		if (!on) { return; }

		// TODO: Make this and laser color user CVars
		LaserAlpha = 1.0;

		// Enemies use red lasers
		if (owner.bISMONSTER && !owner.bFRIENDLY) { LaserColor = "RED"; }
		else { LaserColor = "GREEN"; }

		// Make laser particles larger for players wearing NVGs, and IR lasers visible
		double sizefactor = 1;
		if (players[consoleplayer].mo.checklocalview()) {
			PlayerPawn plr = players[consoleplayer].mo;
			PortableLiteAmp nvg = PortableLiteAmp(plr.FindInventory("PortableLiteAmp"));
			if (nvg && nvg.worn) {
				sizefactor *= clamp(nvg.amplitude * 0.1, 1, 3);
				if (nvg.amplitude > 0) { LaserAlpha = 1.0; }
			}
		}

		// Draw laser particle beam
		FLineTraceData laserTrace;
		emitter.LineTrace(emitter.angle, 16384, emitter.pitch, TRF_THRUACTORS, data: laserTrace);
		for (double f = 0; f < laserTrace.distance; f = f + random[llm](32, 256)) {
			double bliplength = random[llm](8, 32);
			for (double d = f; d < f + bliplength; d = d + frandom[llm](0.1, 1)) {
				if (d > laserTrace.distance) { break; }
				double ps = frandom[llm](1, min(256,laserTrace.distance - d));
				emitter.A_SpawnParticle(LaserColor, SPF_FULLBRIGHT|SPF_RELANG,
					1,
					(frandom[llm](0.75, 1.0) * clamp(d/4096, 0.75, 1)) * sizefactor,
					0,
					cos(emitter.pitch) * cos(emitter.angle) * (d),
					cos(emitter.pitch) * sin(emitter.angle) * (d),
					sin(-emitter.pitch) * (d),
					owner.vel.x + (ps * cos(emitter.angle) * cos(-emitter.pitch)),
					owner.vel.y + (ps * sin(emitter.angle) * cos(-emitter.pitch)),
					owner.vel.z + (ps * sin(-emitter.pitch)),
					0, 0, 0,
					(frandom[llm](0.5, 0.9) * clamp(d/32, 0.0, 1)) * LaserAlpha,
					-1, 0);
			}
			f += bliplength;
		}
	}

	override int getsbarnum(int flags){ return mode; }

	override inventory CreateTossable(int amt) {
		if(emitter) { emitter.destroy(); }
		return super.CreateTossable(amt);
	}

	/*
	override void actualpickup(actor other) {
		super.actualpickup(other);
		UaS_Respirator pu = UaS_Respirator(other.findinventory("UaS_Respirator", false));
		pu.capacity = capacity;
	}*/
}

class UaS_LLM_Emitter : DynamicLight {
	actor source;
	default {
		DynamicLight.Type "Point";
		+DYNAMICLIGHT.ATTENUATE;
		+DYNAMICLIGHT.SPOT
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		Deactivate(self);
		args[DynamicLight.LIGHT_RED] = 255;
		args[DynamicLight.LIGHT_GREEN] = 255;
		args[DynamicLight.LIGHT_BLUE] = 255;
		args[DynamicLight.LIGHT_INTENSITY] = 255;
		SpotInnerAngle = 0;
		SpotOuterAngle = 25;
	}

	override void Tick() {
		super.tick();
		if (!source) Destroy();
	}
}
