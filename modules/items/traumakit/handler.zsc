#include "modules/items/traumakit/wound.zsc"

class UaS_WoundHandler : Inventory {
	array<WoundInfo> critwounds;
	int oldburncount;

	default {
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.UNDROPPABLE;
		-INVENTORY.INVBAR;
		+INVENTORY.UNTOSSABLE;
	}

	override void DoEffect() {
		if (!owner) { return; }
		ManageWounds();
	}

	void ManageWounds() {
		HDPlayerPawn plr = HDPlayerPawn(owner);
		if(!plr) return;

		int diffburns = plr.burncount - oldburncount;
		if (diffburns >= 7) { critwounds.push(WoundInfo.Create(diffburns - 2, true));

		int diffwounds = plr.oldwoundcount - (3 * (critwounds.size()));
		if (diffwounds >= 3) { critwounds.push(WoundInfo.Create(diffwounds)); } // Create a new wound entry every 3 or more points
		if (diffwounds < -3) { RemoveWound(0); } // or remove oldest wound if passively healed at least 3 points

		// iterate wound array, drop any wounds marked "clear"
		for(int i = 0; i <= critwounds.size() - 1; i++) {
			if (!critwounds[i]) { critwounds.delete(i); continue; }
			if (critwounds[i].clear) {
				owner.A_Log("Cured "..critwounds[i].description, true);
				plr.oldwoundcount = max(plr.oldwoundcount - critwounds[i].size, 0);
				RemoveWound(i);
				continue;
			}
			critwounds[i].TickWound();
		}
	}

	void RemoveWound(int w) {
		critwounds[w].destroy();
		critwounds.delete(w);
	}
}
