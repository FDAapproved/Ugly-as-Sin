class UaS_Sling_Spawner : EventHandler {
	override void WorldThingSpawned(WorldEvent e) {
		if(level.maptime > 1) { return; }
		if(!e.Thing) { return; }
		if(e.Thing is "Inventory" && Inventory(e.Thing).Owner) { return; }

		bool spawnable = (
			e.Thing.GetClassName() == "hdsmg" ||
			e.Thing.GetClassName() == "hunter" ||
			e.Thing.GetClassName() == "slayer" ||
			e.Thing.GetClassName() == "zm66assaultrifle" ||
			e.Thing.GetClassName() == "zm66semi" ||
			e.Thing.GetClassName() == "zm66regular" ||
			e.Thing.GetClassName() == "vulcanette" ||
			e.Thing.GetClassName() == "liberatorrifle" ||
			e.Thing.GetClassName() == "liberatornogl" ||
			e.Thing.GetClassName() == "bossrifle"
		);

		if (spawnable && UaS.RandomChance(0.1)) { UaS.SpawnStuff("UaS_WeaponSling", 1, e.Thing.pos); }
	}
}

class UaS_WeaponSling : HDPickup {
	int holdingToggle;
	bool slingActive;
	actor attachedWeapon;
	array<string> weaponList;

	Default {
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "Picked up a weapon sling-brace rig.";
		Inventory.Icon "HSCVI0";
		HDPickup.Bulk 20;
		Scale 0.75;
		+FLATSPRITE;
		tag "Sling-brace rig";
		hdpickup.refid UAS_HDLD_SLING;
	}

	override void BeginPlay() {
		weaponList.push("hdsmg");
		weaponList.push("hunter");
		weaponList.push("slayer");
		weaponList.push("zm66assaultrifle");
		weaponList.push("zm66semi");
		weaponList.push("zm66regular");
		weaponList.push("vulcanette");
		weaponList.push("liberatorrifle");
		weaponList.push("liberatornogl");
		weaponList.push("bossrifle");
		super.BeginPlay();
	}

	override void DoEffect() {
		super.DoEffect();
		let ownr = HDPlayerPawn(owner);
		if(!ownr) { return; }
		if(!ownr.player.ReadyWeapon) { return; } // Skip if no ready weapon

		// Break attachment if switched away or dropped
		if(ownr.player.ReadyWeapon != attachedweapon) { attachedWeapon = null; }

		// Stunning makes you lose sling
		if (ownr.stunned > 0) { slingActive = false; }

		//Brace weapon if everyting good
		if(slingActive) { ownr.gunbraced = true;	}

		// Movement debuffs
		/*switch(ownr.runwalksprint) {
			case -1:
				break;
			case 0:
			case 1:
				console.printf("sling rig stopped bracing");
				slingActive = false;
				break;
		}*/
	}

	override bool Use(bool pickup) {
		slingActive = true;
		return false;
	}
}
